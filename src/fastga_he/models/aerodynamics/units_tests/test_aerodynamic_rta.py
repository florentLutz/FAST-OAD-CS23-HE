# This file is part of FAST-OAD_CS23-HE : A framework for rapid Overall Aircraft Design of Hybrid
# Electric Aircraft.
# Copyright (C) 2025 ISAE-SUPAERO

import os.path as pth

import pytest

from ..components.compute_polar_rta import (
    ComputePolar,
    _ComputePolarCL,
    _ComputePolarCD,
    _ComputePolarOptimal,
)

from tests.testing_utilities import get_indep_var_comp, list_inputs, run_system
from fastoad_cs25.models.aerodynamics.constants import PolarType

DATA_FOLDER_PATH = pth.join(pth.dirname(__file__), "data")
RESULTS_FOLDER_PATH = pth.join(pth.dirname(__file__), "results")

XML_FILE = "inputs_full_sizing.xml"


def test_polar_cl():
    ivc = get_indep_var_comp(
        list_inputs(_ComputePolarCL(polar_type=PolarType.TAKEOFF)), __file__, XML_FILE
    )

    problem = run_system(_ComputePolarCL(polar_type=PolarType.TAKEOFF), ivc)

    assert problem.get_val("data:aerodynamics:aircraft:takeoff:CL") == pytest.approx(
        [
            0.730569616358973,
            0.740569616358973,
            0.750569616358973,
            0.760569616358973,
            0.770569616358973,
            0.780569616358973,
            0.790569616358973,
            0.8005696163589731,
            0.810569616358973,
            0.820569616358973,
            0.830569616358973,
            0.840569616358973,
            0.850569616358973,
            0.860569616358973,
            0.870569616358973,
            0.880569616358973,
            0.890569616358973,
            0.900569616358973,
            0.9105696163589729,
            0.9205696163589729,
            0.930569616358973,
            0.940569616358973,
            0.950569616358973,
            0.960569616358973,
            0.970569616358973,
            0.980569616358973,
            0.990569616358973,
            1.000569616358973,
            1.010569616358973,
            1.020569616358973,
            1.030569616358973,
            1.040569616358973,
            1.050569616358973,
            1.060569616358973,
            1.070569616358973,
            1.080569616358973,
            1.090569616358973,
            1.1005696163589729,
            1.110569616358973,
            1.120569616358973,
            1.1305696163589731,
            1.140569616358973,
            1.150569616358973,
            1.160569616358973,
            1.170569616358973,
            1.180569616358973,
            1.190569616358973,
            1.200569616358973,
            1.210569616358973,
            1.220569616358973,
            1.230569616358973,
            1.240569616358973,
            1.250569616358973,
            1.260569616358973,
            1.270569616358973,
            1.280569616358973,
            1.290569616358973,
            1.300569616358973,
            1.3105696163589728,
            1.320569616358973,
            1.3305696163589729,
            1.340569616358973,
            1.3505696163589729,
            1.360569616358973,
            1.370569616358973,
            1.3805696163589731,
            1.390569616358973,
            1.4005696163589731,
            1.410569616358973,
            1.4205696163589732,
            1.430569616358973,
            1.440569616358973,
            1.450569616358973,
            1.460569616358973,
            1.470569616358973,
            1.480569616358973,
            1.490569616358973,
            1.500569616358973,
            1.510569616358973,
            1.520569616358973,
            1.530569616358973,
            1.540569616358973,
            1.550569616358973,
            1.560569616358973,
            1.570569616358973,
            1.5805696163589729,
            1.590569616358973,
            1.6005696163589729,
            1.610569616358973,
            1.620569616358973,
            1.6305696163589731,
            1.640569616358973,
            1.6505696163589731,
            1.660569616358973,
            1.6705696163589732,
            1.680569616358973,
            1.690569616358973,
            1.700569616358973,
            1.710569616358973,
            1.720569616358973,
            1.730569616358973,
            1.740569616358973,
            1.750569616358973,
            1.760569616358973,
            1.770569616358973,
            1.780569616358973,
            1.790569616358973,
            1.800569616358973,
            1.810569616358973,
            1.820569616358973,
            1.830569616358973,
            1.840569616358973,
            1.850569616358973,
            1.860569616358973,
            1.8705696163589731,
            1.8805696163589731,
            1.890569616358973,
            1.900569616358973,
            1.910569616358973,
            1.920569616358973,
            1.930569616358973,
            1.940569616358973,
            1.950569616358973,
            1.960569616358973,
            1.970569616358973,
            1.980569616358973,
            1.990569616358973,
            2.0005696163589732,
            2.010569616358973,
            2.020569616358973,
            2.030569616358973,
            2.0405696163589733,
            2.050569616358973,
            2.060569616358973,
            2.070569616358973,
            2.0805696163589733,
            2.090569616358973,
            2.100569616358973,
            2.110569616358973,
            2.1205696163589733,
            2.130569616358973,
            2.140569616358973,
            2.1505696163589727,
            2.160569616358973,
            2.170569616358973,
            2.180569616358973,
            2.1905696163589727,
            2.200569616358973,
            2.210569616358973,
            2.220569616358973,
        ],
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_polar_optimal():
    ivc = get_indep_var_comp(list_inputs(_ComputePolarOptimal()), __file__, XML_FILE)

    problem = run_system(_ComputePolarOptimal(), ivc)

    assert problem.get_val("data:aerodynamics:aircraft:cruise:L_D_max") == pytest.approx(
        17.225,
        rel=1e-3,
    )
    assert problem.get_val("data:aerodynamics:aircraft:cruise:optimal_CL") == pytest.approx(
        0.92,
        rel=1e-3,
    )
    assert problem.get_val("data:aerodynamics:aircraft:cruise:optimal_CD") == pytest.approx(
        0.0534,
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_polar_cd():
    ivc = get_indep_var_comp(
        list_inputs(_ComputePolarCD(polar_type=PolarType.TAKEOFF)), __file__, XML_FILE
    )

    problem = run_system(_ComputePolarCD(polar_type=PolarType.TAKEOFF), ivc)

    assert problem.get_val("data:aerodynamics:aircraft:takeoff:CD") == pytest.approx(
        [
            0.04940295876695004,
            0.049864422228785066,
            0.05033207931716701,
            0.05080593003209587,
            0.051285974373571644,
            0.05177221234159434,
            0.05226464393616395,
            0.05276326915728048,
            0.05326808800494394,
            0.0537791004791543,
            0.054296306579911593,
            0.0548197063072158,
            0.05534929966106692,
            0.055885086641464965,
            0.05642706724840993,
            0.056975241481901806,
            0.057529609341940596,
            0.058090170828526314,
            0.058656925941658944,
            0.0592298746813385,
            0.05980901704756497,
            0.060394353040338355,
            0.06098588265965866,
            0.06158360590552588,
            0.06218752277794003,
            0.06279763327690109,
            0.06341393740240907,
            0.06403643515446397,
            0.06466512653306578,
            0.06530001153821452,
            0.06594109016991016,
            0.06658836242815273,
            0.06724182831294223,
            0.06790148782427864,
            0.06856734096216195,
            0.0692393877265922,
            0.06991762811756937,
            0.07060206213509344,
            0.07129268977916445,
            0.07198951104978236,
            0.0726925259469472,
            0.07340173447065897,
            0.07411713662091764,
            0.07483873239772322,
            0.07556652180107573,
            0.07630050483097515,
            0.0770406814874215,
            0.07778705177041477,
            0.07853961567995495,
            0.07929837321604204,
            0.08006332437867607,
            0.08083446916785698,
            0.08161180758358487,
            0.08239533962585961,
            0.08318506529468132,
            0.08398098459004992,
            0.08478309751196546,
            0.08559140406042788,
            0.08640590423543726,
            0.08722659803699354,
            0.08805348546509674,
            0.08888656651974687,
            0.0897258412009439,
            0.09057130950868784,
            0.09142297144297873,
            0.09228082700381653,
            0.09314487619120122,
            0.09401511900513286,
            0.09489155544561141,
            0.09577418551263688,
            0.09666300920620927,
            0.09755802652632857,
            0.09845923747299477,
            0.09936664204620793,
            0.10028024024596795,
            0.10120003207227497,
            0.10212601752512883,
            0.10305819660452965,
            0.10399656931047738,
            0.10494113564297203,
            0.10589189560201359,
            0.1068488491876021,
            0.10781199639973747,
            0.10878133723841982,
            0.10975687170364905,
            0.1107385997954252,
            0.11172652151374828,
            0.11272063685861829,
            0.11372094583003518,
            0.11472744842799902,
            0.11574014465250977,
            0.11675903450356744,
            0.11778411798117201,
            0.11881539508532352,
            0.11985286581602195,
            0.12089653017326728,
            0.12194638815705955,
            0.12300243976739869,
            0.12406468500428483,
            0.1251331238677178,
            0.12620775635769776,
            0.1272885824742246,
            0.12837560221729838,
            0.12946881558691906,
            0.13056822258308667,
            0.13167382320580118,
            0.13278561745506262,
            0.13390360533087098,
            0.13502778683322628,
            0.13615816196212843,
            0.13729473071757758,
            0.1384374930995736,
            0.13958644910811657,
            0.1407415987432064,
            0.1419029420048432,
            0.1430704788930269,
            0.1442442094077575,
            0.14542413354903508,
            0.1466102513168595,
            0.14780256271123093,
            0.1490010677321492,
            0.15020576637961444,
            0.15141665865362655,
            0.15263374455418563,
            0.15385702408129157,
            0.1550864972349445,
            0.15632216401514426,
            0.15756402442189102,
            0.1588120784551846,
            0.16006632611502525,
            0.16132676740141266,
            0.1625934023143471,
            0.1638662308538284,
            0.16514525301985666,
            0.1664304688124318,
            0.16772187823155388,
            0.16901948127722285,
            0.1703232779494388,
            0.17163326824820158,
            0.17294945217351135,
            0.174271829725368,
            0.17560040090377155,
            0.1769351657087221,
            0.17827612414021946,
            0.1796232761982638,
            0.18097662188285504,
            0.18233616119399326,
            0.18370189413167834,
            0.18507382069591036,
            0.18645194088668926,
        ],
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)
