# This file is part of FAST-OAD_CS23-HE : A framework for rapid Overall Aircraft Design of Hybrid
# Electric Aircraft.
# Copyright (C) 2025 ISAE-SUPAERO

import os.path as pth
import pytest

from ..components.cd0_power_train import Cd0PowerTrain
from ..components.compute_polar_rta import (
    ComputePolar,
    _ComputePolarCL,
    _ComputePolarCD,
    _ComputePolarOptimal,
)
from ..components.cd0_wing_rta import (
    _FlatPlateFrictionDragCoefficient,
    _SweepCorrection,
    _CamberContribution,
    _RelativeThicknessContribution,
    _Cd0Wing,
    Cd0Wing,
)
from ..components.cd0_total_rta import _TotalCd0ParasiticFactor, _AircraftCd0, _Cd0Median, Cd0Total

from tests.testing_utilities import get_indep_var_comp, list_inputs, run_system
from fastoad_cs25.models.aerodynamics.constants import PolarType

DATA_FOLDER_PATH = pth.join(pth.dirname(__file__), "data")
RESULTS_FOLDER_PATH = pth.join(pth.dirname(__file__), "results")

XML_FILE = "data.xml"


def test_powertrain_cd0():
    ivc = get_indep_var_comp(list_inputs(Cd0PowerTrain()), __file__, XML_FILE)

    problem = run_system(Cd0PowerTrain(), ivc)

    assert problem.get_val("data:aerodynamics:nacelles:cruise:CD0") == pytest.approx(
        0.0008112,
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_polar_cl():
    ivc = get_indep_var_comp(
        list_inputs(_ComputePolarCL(polar_type=PolarType.TAKEOFF)), __file__, XML_FILE
    )

    problem = run_system(_ComputePolarCL(polar_type=PolarType.TAKEOFF), ivc)

    assert problem.get_val("data:aerodynamics:aircraft:takeoff:CL") == pytest.approx(
        [
            0.730569616358973,
            0.740569616358973,
            0.750569616358973,
            0.760569616358973,
            0.770569616358973,
            0.780569616358973,
            0.790569616358973,
            0.8005696163589731,
            0.810569616358973,
            0.820569616358973,
            0.830569616358973,
            0.840569616358973,
            0.850569616358973,
            0.860569616358973,
            0.870569616358973,
            0.880569616358973,
            0.890569616358973,
            0.900569616358973,
            0.9105696163589729,
            0.9205696163589729,
            0.930569616358973,
            0.940569616358973,
            0.950569616358973,
            0.960569616358973,
            0.970569616358973,
            0.980569616358973,
            0.990569616358973,
            1.000569616358973,
            1.010569616358973,
            1.020569616358973,
            1.030569616358973,
            1.040569616358973,
            1.050569616358973,
            1.060569616358973,
            1.070569616358973,
            1.080569616358973,
            1.090569616358973,
            1.1005696163589729,
            1.110569616358973,
            1.120569616358973,
            1.1305696163589731,
            1.140569616358973,
            1.150569616358973,
            1.160569616358973,
            1.170569616358973,
            1.180569616358973,
            1.190569616358973,
            1.200569616358973,
            1.210569616358973,
            1.220569616358973,
            1.230569616358973,
            1.240569616358973,
            1.250569616358973,
            1.260569616358973,
            1.270569616358973,
            1.280569616358973,
            1.290569616358973,
            1.300569616358973,
            1.3105696163589728,
            1.320569616358973,
            1.3305696163589729,
            1.340569616358973,
            1.3505696163589729,
            1.360569616358973,
            1.370569616358973,
            1.3805696163589731,
            1.390569616358973,
            1.4005696163589731,
            1.410569616358973,
            1.4205696163589732,
            1.430569616358973,
            1.440569616358973,
            1.450569616358973,
            1.460569616358973,
            1.470569616358973,
            1.480569616358973,
            1.490569616358973,
            1.500569616358973,
            1.510569616358973,
            1.520569616358973,
            1.530569616358973,
            1.540569616358973,
            1.550569616358973,
            1.560569616358973,
            1.570569616358973,
            1.5805696163589729,
            1.590569616358973,
            1.6005696163589729,
            1.610569616358973,
            1.620569616358973,
            1.6305696163589731,
            1.640569616358973,
            1.6505696163589731,
            1.660569616358973,
            1.6705696163589732,
            1.680569616358973,
            1.690569616358973,
            1.700569616358973,
            1.710569616358973,
            1.720569616358973,
            1.730569616358973,
            1.740569616358973,
            1.750569616358973,
            1.760569616358973,
            1.770569616358973,
            1.780569616358973,
            1.790569616358973,
            1.800569616358973,
            1.810569616358973,
            1.820569616358973,
            1.830569616358973,
            1.840569616358973,
            1.850569616358973,
            1.860569616358973,
            1.8705696163589731,
            1.8805696163589731,
            1.890569616358973,
            1.900569616358973,
            1.910569616358973,
            1.920569616358973,
            1.930569616358973,
            1.940569616358973,
            1.950569616358973,
            1.960569616358973,
            1.970569616358973,
            1.980569616358973,
            1.990569616358973,
            2.0005696163589732,
            2.010569616358973,
            2.020569616358973,
            2.030569616358973,
            2.0405696163589733,
            2.050569616358973,
            2.060569616358973,
            2.070569616358973,
            2.0805696163589733,
            2.090569616358973,
            2.100569616358973,
            2.110569616358973,
            2.1205696163589733,
            2.130569616358973,
            2.140569616358973,
            2.1505696163589727,
            2.160569616358973,
            2.170569616358973,
            2.180569616358973,
            2.1905696163589727,
            2.200569616358973,
            2.210569616358973,
            2.220569616358973,
        ],
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_polar_cd():
    ivc = get_indep_var_comp(
        list_inputs(_ComputePolarCD(polar_type=PolarType.TAKEOFF)), __file__, XML_FILE
    )

    problem = run_system(_ComputePolarCD(polar_type=PolarType.TAKEOFF), ivc)

    assert problem.get_val("data:aerodynamics:aircraft:takeoff:CD") == pytest.approx(
        [
            0.04940295876695004,
            0.049864422228785066,
            0.05033207931716701,
            0.05080593003209587,
            0.051285974373571644,
            0.05177221234159434,
            0.05226464393616395,
            0.05276326915728048,
            0.05326808800494394,
            0.0537791004791543,
            0.054296306579911593,
            0.0548197063072158,
            0.05534929966106692,
            0.055885086641464965,
            0.05642706724840993,
            0.056975241481901806,
            0.057529609341940596,
            0.058090170828526314,
            0.058656925941658944,
            0.0592298746813385,
            0.05980901704756497,
            0.060394353040338355,
            0.06098588265965866,
            0.06158360590552588,
            0.06218752277794003,
            0.06279763327690109,
            0.06341393740240907,
            0.06403643515446397,
            0.06466512653306578,
            0.06530001153821452,
            0.06594109016991016,
            0.06658836242815273,
            0.06724182831294223,
            0.06790148782427864,
            0.06856734096216195,
            0.0692393877265922,
            0.06991762811756937,
            0.07060206213509344,
            0.07129268977916445,
            0.07198951104978236,
            0.0726925259469472,
            0.07340173447065897,
            0.07411713662091764,
            0.07483873239772322,
            0.07556652180107573,
            0.07630050483097515,
            0.0770406814874215,
            0.07778705177041477,
            0.07853961567995495,
            0.07929837321604204,
            0.08006332437867607,
            0.08083446916785698,
            0.08161180758358487,
            0.08239533962585961,
            0.08318506529468132,
            0.08398098459004992,
            0.08478309751196546,
            0.08559140406042788,
            0.08640590423543726,
            0.08722659803699354,
            0.08805348546509674,
            0.08888656651974687,
            0.0897258412009439,
            0.09057130950868784,
            0.09142297144297873,
            0.09228082700381653,
            0.09314487619120122,
            0.09401511900513286,
            0.09489155544561141,
            0.09577418551263688,
            0.09666300920620927,
            0.09755802652632857,
            0.09845923747299477,
            0.09936664204620793,
            0.10028024024596795,
            0.10120003207227497,
            0.10212601752512883,
            0.10305819660452965,
            0.10399656931047738,
            0.10494113564297203,
            0.10589189560201359,
            0.1068488491876021,
            0.10781199639973747,
            0.10878133723841982,
            0.10975687170364905,
            0.1107385997954252,
            0.11172652151374828,
            0.11272063685861829,
            0.11372094583003518,
            0.11472744842799902,
            0.11574014465250977,
            0.11675903450356744,
            0.11778411798117201,
            0.11881539508532352,
            0.11985286581602195,
            0.12089653017326728,
            0.12194638815705955,
            0.12300243976739869,
            0.12406468500428483,
            0.1251331238677178,
            0.12620775635769776,
            0.1272885824742246,
            0.12837560221729838,
            0.12946881558691906,
            0.13056822258308667,
            0.13167382320580118,
            0.13278561745506262,
            0.13390360533087098,
            0.13502778683322628,
            0.13615816196212843,
            0.13729473071757758,
            0.1384374930995736,
            0.13958644910811657,
            0.1407415987432064,
            0.1419029420048432,
            0.1430704788930269,
            0.1442442094077575,
            0.14542413354903508,
            0.1466102513168595,
            0.14780256271123093,
            0.1490010677321492,
            0.15020576637961444,
            0.15141665865362655,
            0.15263374455418563,
            0.15385702408129157,
            0.1550864972349445,
            0.15632216401514426,
            0.15756402442189102,
            0.1588120784551846,
            0.16006632611502525,
            0.16132676740141266,
            0.1625934023143471,
            0.1638662308538284,
            0.16514525301985666,
            0.1664304688124318,
            0.16772187823155388,
            0.16901948127722285,
            0.1703232779494388,
            0.17163326824820158,
            0.17294945217351135,
            0.174271829725368,
            0.17560040090377155,
            0.1769351657087221,
            0.17827612414021946,
            0.1796232761982638,
            0.18097662188285504,
            0.18233616119399326,
            0.18370189413167834,
            0.18507382069591036,
            0.18645194088668926,
        ],
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_polar_optimal():
    ivc = get_indep_var_comp(list_inputs(_ComputePolarOptimal()), __file__, XML_FILE)

    problem = run_system(_ComputePolarOptimal(), ivc)

    assert problem.get_val("data:aerodynamics:aircraft:cruise:L_D_max") == pytest.approx(
        17.225,
        rel=1e-3,
    )
    assert problem.get_val("data:aerodynamics:aircraft:cruise:optimal_CL") == pytest.approx(
        0.92,
        rel=1e-3,
    )
    assert problem.get_val("data:aerodynamics:aircraft:cruise:optimal_CD") == pytest.approx(
        0.0534,
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_polar():
    for type in PolarType:
        ivc = get_indep_var_comp(list_inputs(ComputePolar(polar_type=type)), __file__, XML_FILE)

        problem = run_system(ComputePolar(polar_type=type), ivc)

        problem.check_partials(compact_print=True)


def test_flat_plate_friction():
    ivc = get_indep_var_comp(list_inputs(_FlatPlateFrictionDragCoefficient()), __file__, XML_FILE)

    problem = run_system(_FlatPlateFrictionDragCoefficient(), ivc)

    assert problem.get_val("plate_drag_friction_coeff") == pytest.approx(
        0.002794,
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_thickness_contribution():
    ivc = get_indep_var_comp(list_inputs(_RelativeThicknessContribution()), __file__, XML_FILE)

    problem = run_system(_RelativeThicknessContribution(), ivc)

    assert problem.get_val("thickness_contribution") == pytest.approx(
        0.53528,
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_camber_contribution():
    ivc = get_indep_var_comp(list_inputs(_CamberContribution()), __file__, XML_FILE)

    problem = run_system(_CamberContribution(), ivc)

    assert problem.get_val("camber_contribution") == pytest.approx(
        0.5035,
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_sweep_contribution():
    ivc = get_indep_var_comp(list_inputs(_SweepCorrection()), __file__, XML_FILE)

    problem = run_system(_SweepCorrection(), ivc)

    assert problem.get_val("sweep_correction") == pytest.approx(
        0.9997,
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_cd0_wing():
    ivc = get_indep_var_comp(list_inputs(_Cd0Wing()), __file__, XML_FILE)
    ivc.add_output("plate_drag_friction_coeff", val=0.002794)
    ivc.add_output("thickness_contribution", val=0.53528)
    ivc.add_output("camber_contribution", val=0.5035)
    ivc.add_output("sweep_correction", val=0.9997)

    problem = run_system(_Cd0Wing(), ivc)

    assert problem.get_val("data:aerodynamics:wing:cruise:CD0") == pytest.approx(
        0.01053,
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_cd0_wing_overall():
    ivc = get_indep_var_comp(list_inputs(Cd0Wing()), __file__, XML_FILE)

    problem = run_system(Cd0Wing(), ivc)

    assert problem.get_val("data:aerodynamics:wing:cruise:CD0") == pytest.approx(
        0.01053,
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_parasitic_factor():
    ivc = get_indep_var_comp(list_inputs(_TotalCd0ParasiticFactor()), __file__, XML_FILE)

    problem = run_system(_TotalCd0ParasiticFactor(), ivc)

    assert problem.get_val("k_parasitic") == pytest.approx(
        0.1321,
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_cd0_aircraft():
    ivc = get_indep_var_comp(list_inputs(_AircraftCd0()), __file__, XML_FILE)
    ivc.add_output("k_parasitic", val=0.1321)

    problem = run_system(_AircraftCd0(), ivc)

    assert problem.get_val("data:aerodynamics:aircraft:cruise:CD0:parasitic") == pytest.approx(
        [
            0.0032381657656552695,
            0.0032356091895059257,
            0.0032330751793916853,
            0.003230563735312547,
            0.0032280748572685127,
            0.0032256085452595806,
            0.003223164799285752,
            0.003220743619347026,
            0.0032183450054434036,
            0.003215968957574884,
            0.003213615475741467,
            0.0032112845599431535,
            0.003208976210179943,
            0.0032066904264518355,
            0.0032044272087588302,
            0.003202186557100929,
            0.0031999684714781305,
            0.0031977729518904347,
            0.0031955999983378424,
            0.003193449610820353,
            0.0031913217893379665,
            0.003189216533890683,
            0.0031871338444785023,
            0.003185073721101425,
            0.0031830361637594506,
            0.003181021172452579,
            0.003179028747180811,
            0.0031770588879441457,
            0.0031751115947425833,
            0.003173186867576124,
            0.0031712847064447676,
            0.003169405111348515,
            0.0031675480822873645,
            0.0031657136192613173,
            0.003163901722270373,
            0.0031621123913145323,
            0.0031603456263937938,
            0.0031586014275081582,
            0.0031568797946576266,
            0.003155180727842197,
            0.0031535042270618716,
            0.003151850292316648,
            0.0031502189236065287,
            0.003148610120931511,
            0.003147023884291597,
            0.0031454602136867862,
            0.0031439191091170784,
            0.0031424005705824733,
            0.0031409045980829715,
            0.0031394311916185724,
            0.0031379803511892763,
            0.0031365520767950837,
            0.003135146368435994,
            0.003133763226112007,
            0.003132402649823123,
            0.0031310646395693426,
            0.003129749195350665,
            0.00312845631716709,
            0.0031271860050186184,
            0.00312593825890525,
            0.003124713078826984,
            0.003123510464783821,
            0.0031223304167757615,
            0.0031211729348028052,
            0.003120038018864951,
            0.0031189256689622006,
            0.0031178358850945534,
            0.003116768667262009,
            0.0031157240154645674,
            0.0031147019297022285,
            0.0031137024099749935,
            0.003112725456282861,
            0.0031117710686258313,
            0.003110839247003905,
            0.0031099299914170812,
            0.0031090433018653614,
            0.0031081791783487437,
            0.0031073376208672295,
            0.0031065186294208184,
            0.0031057222040095102,
            0.0031049483446333047,
            0.003104197051292202,
            0.0031034683239862027,
            0.0031027621627153067,
            0.0031020785674795138,
            0.003101417538278824,
            0.0031007790751132365,
            0.003100163177982752,
            0.0030995698468873714,
            0.0030989990818270927,
            0.0030984508828019175,
            0.0030979252498118458,
            0.0030974221828568766,
            0.003096941681937011,
            0.003096483747052248,
            0.003096048378202588,
            0.003095635575388031,
            0.0030952453386085773,
            0.003094877667864226,
            0.003094532563154978,
            0.003094210024480833,
            0.0030939100518417913,
            0.0030936326452378525,
            0.0030933778046690163,
            0.003093145530135284,
            0.003092935821636654,
            0.0030927486791731272,
            0.0030925841027447036,
            0.003092442092351383,
            0.0030923226479931654,
            0.00309222576967005,
            0.003092151457382039,
            0.00309209971112913,
            0.003092070530911324,
            0.0030920639167286218,
            0.003092079868581022,
            0.003092118386468526,
            0.003092179470391132,
            0.0030922631203488416,
            0.003092369336341654,
            0.0030924981183695697,
            0.003092649466432588,
            0.0030928233805307096,
            0.003093019860663934,
            0.0030932389068322615,
            0.0030934805190356925,
            0.003093744697274226,
            0.0030940314415478626,
            0.0030943407518566027,
            0.003094672628200445,
            0.003095027070579391,
            0.003095404078993439,
            0.003095803653442591,
            0.003096225793926846,
            0.0030966705004462037,
            0.0030971377730006646,
            0.003097627611590228,
            0.0030981400162148954,
            0.003098674986874665,
            0.003099232523569538,
            0.003099812626299514,
            0.003100415295064593,
            0.0031010405298647747,
            0.00310168833070006,
            0.003102358697570448,
            0.0031030516304759383,
            0.003103767129416533,
            0.0031045051943922298,
            0.0031052658254030296,
            0.003106049022448933,
        ],
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_cd0_aircraft_median():
    ivc = get_indep_var_comp(list_inputs(_Cd0Median()), __file__, XML_FILE)

    problem = run_system(_Cd0Median(), ivc)

    assert problem.get_val("data:aerodynamics:aircraft:cruise:CD0") == pytest.approx(
        0.02664,
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)


def test_cd0_aircraft_overall():
    ivc = get_indep_var_comp(list_inputs(Cd0Total()), __file__, XML_FILE)

    problem = run_system(Cd0Total(), ivc)

    assert problem.get_val("data:aerodynamics:aircraft:cruise:CD0") == pytest.approx(
        0.02664,
        rel=1e-3,
    )

    problem.check_partials(compact_print=True)
